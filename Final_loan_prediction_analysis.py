# -*- coding: utf-8 -*-
"""Final_Loan_Prediction_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11BI6W0BwGk4tk_h-osbYTXPMNozhL_ga
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

# Load data
train = pd.read_csv(r'/train.csv')
test = pd.read_csv(r'/test.csv')

# Preprocess training data
train.Loan_Status = train.Loan_Status.map({'Y': 1, 'N': 0})
Loan_status = train.Loan_Status
train.drop('Loan_Status', axis=1, inplace=True)

# Combine train and test data for preprocessing
Loan_ID = test.Loan_ID
data = pd.concat([train, test], ignore_index=True)

# Display basic statistics
print(data.describe())

print(data.info())

# Handling missing values
data.Gender = data.Gender.map({'Male': 1, 'Female': 0})
data.Married = data.Married.map({'Yes': 1, 'No': 0})
data.Dependents = data.Dependents.map({'0': 0, '1': 1, '2': 2, '3+': 3})
data.Education = data.Education.map({'Graduate': 1, 'Not Graduate': 0})
data.Self_Employed = data.Self_Employed.map({'Yes': 1, 'No': 0})
data.Property_Area = data.Property_Area.map({'Urban': 2, 'Rural': 0, 'Semiurban': 1})

data.info()

# Fill missing values
data.Credit_History.fillna(np.random.randint(0, 2), inplace=True)
data.Married.fillna(np.random.randint(0, 2), inplace=True)
data.Gender.fillna(np.random.randint(0, 2), inplace=True)
data.Dependents.fillna(data.Dependents.median(), inplace=True)
data.Self_Employed.fillna(np.random.randint(0, 2), inplace=True)
data.LoanAmount.fillna(data.LoanAmount.median(), inplace=True)
data.Loan_Amount_Term.fillna(data.Loan_Amount_Term.mean(), inplace=True)

# Drop Loan_ID column
data.drop('Loan_ID', inplace=True, axis=1)

# Separate train and test data
train_X = data.iloc[:614,]
train_y = Loan_status
X_test = data.iloc[614:,]

# Split the training data into train and test sets
from sklearn.model_selection import train_test_split
train_X, test_X, train_y, test_y = train_test_split(train_X, train_y, random_state=7)

# Initialize models
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

models = [
    ("logreg", LogisticRegression()),
    ("tree", DecisionTreeClassifier()),
    ("lda", LinearDiscriminantAnalysis()),
    ("svc", SVC()),
    ("knn", KNeighborsClassifier()),
    ("nb", GaussianNB())
]

# Evaluate models using cross-validation
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

results = []
names = []

for name, model in models:
    kfold = KFold(n_splits=10, random_state=7, shuffle=True)
    cv_result = cross_val_score(model, train_X, train_y, cv=kfold, scoring='accuracy')
    results.append(cv_result)
    names.append(name)
    print("%s %f %f" % (name, cv_result.mean(), cv_result.std()))

# Train and evaluate Logistic Regression model
logreg = LogisticRegression()
logreg.fit(train_X, train_y)
pred = logreg.predict(test_X)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print(accuracy_score(test_y, pred))
print(confusion_matrix(test_y, pred))
print(classification_report(test_y, pred))

# Predict on test set
outp = logreg.predict(X_test).astype(int)

# Prepare submission file
df_output = pd.DataFrame()
df_output['Loan_ID'] = Loan_ID
df_output['Loan_Status'] = outp
df_output.to_csv(r'/output.csv', index=False)

# Additional analysis plots
# Distribution of Loan Amount
plt.figure(figsize=(10, 6))
sns.histplot(data['LoanAmount'].dropna(), bins=20, kde=True)
plt.title('Distribution of Loan Amount')
plt.xlabel('Loan Amount')
plt.ylabel('Frequency')
plt.show()

# Countplot for Education
plt.figure(figsize=(10, 6))
sns.countplot(x='Education', data=data)
plt.title('Education Count')
plt.xlabel('Education')
plt.ylabel('Count')
plt.show()

# Pairplot of select features
plt.figure(figsize=(12, 8))
sns.pairplot(data[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term']])
plt.show()

# Heatmap of correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

